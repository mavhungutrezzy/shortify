import pytest

from shortify.models import UrlMap

py_url = "https://www.python.org"


def test_index_form_get(client):
    got = client.get("/")
    assert got.status_code == 200
    assert b"form" in got.data, "Add form to page context `index`"


def test_index_form_post(client):
    got = client.post(
        "/",
        data={
            "original_link": py_url,
            "custom_id": "py",
        },
    )
    assert (
        got.status_code == 200
    ), "When submitting the form, the main page should return status `200`"
    unique_id = UrlMap.query.filter_by(original=py_url, short="py").first()
    assert (
        unique_id
    ), "When submitting the form, the database should contain a record with the original link "
    assert '<a href="http://localhost/py"' in got.data.decode(
        "utf-8"
    ), "When submitting the form, the main page should contain a link to the created short link"


def test_duplicated_url_in_form(client, short_python_url):
    got = client.post(
        "/",
        data={
            "original_link": py_url,
            "custom_id": "py",
        },
        follow_redirects=True,
    )
    assert "The name py is already taken!" in got.data.decode("utf-8"), (
        "When submitting the form, the main page should contain a link to the created short link"
        "If the short link already exists, the main page should display an error message"
    )


def test_get_unique_short_id(client):
    got = client.post(
        "/",
        data={
            "original_link": py_url,
        },
    )
    assert got.status_code == 200, (
        "When submitting the form without specifying a short link, "
        "the main page should return status `200`"
    )
    unique_id = UrlMap.query.filter_by(original=py_url).first()
    assert unique_id, (
        "When submitting the form without specifying a short link, "
        "the database should contain a record with the original link"
    )
    assert f"Your new link is ready: http://localhost:5000/{unique_id.short}", (
        "When submitting the form without specifying a short link, "
        "the main page should contain a link to the created short link"
    )


def test_redirect_url(client, short_python_url):
    got = client.get(f"/{short_python_url.short}")
    assert (
        got.status_code == 302
    ), "When redirecting to a short address, make sure that the status code `302` is returned"
    assert (
        got.location == short_python_url.original
    ), "When redirecting to a short address, make sure that the original link is returned"


def test_len_short_id_form(client):
    long_string = "CuriosityisnotasinHarryHoweverfromtimetotimeyoushouldexercisecaution"
    got = client.post(
        "/",
        data={
            "original_link": py_url,
            "custom_id": long_string,
        },
    )
    assert "Your new link is ready" not in got.data.decode("utf-8"), (
        "If the short link is longer than 6 characters, "
        "the main page should not contain a link to the created short link"
    )


def test_len_short_id_autogenerated_view(client):
    client.post(
        "/",
        data={
            "original_link": py_url,
        },
    )
    unique_id = UrlMap.query.filter_by(original=py_url).first()
    assert len(unique_id.short) == 6, (
        "If the short link is longer than 6 characters, "
        "the main page should not contain a link to the created short link"
    )


@pytest.mark.parametrize(
    "data",
    [
        ({"url": py_url, "custom_id": ".,/!?"}),
        ({"url": py_url, "custom_id": "Hodor-Hodor"}),
        ({"url": py_url, "custom_id": "h@k$r"}),
        ({"url": py_url, "custom_id": "$"}),
    ],
)
def test_invalid_short_url(data, client):
    client.post("/", data=data)
    unique_id = UrlMap.query.filter_by(original=py_url).first()
    assert not unique_id, (
        "If the short link contains invalid characters, "
        "the database should not contain a record with the original link"
    )
